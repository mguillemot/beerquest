- @css = 'bar'
%table.cols
  %tr.small
    %td.small
    %td
    %td.small
  %tr
    %td.small
    %td.unique-col
      %table.bar-area
        %tr
          %td.bar-name{:colspan => 2}
            %table.vs
              %tr
                %td.player-me
                  .name= @me.full_name
                  .scores
                    %span.loose= t 'challenge.title.loose_count', :count => @me.total_victories
                    = " / "
                    %span.respect= t 'challenge.title.respect_count', :count => @me.total_defeats
                %td.portrait-me
                  = image_tag @me.profile_picture, :alt => @me.full_name, :class => 'portrait'
                %td.vs
                  %div= t 'challenge.title.vs'
                  .round= t 'challenge.title.round', :round => @challenge.round
                %td.portrait-opponent
                  = image_tag @challenger.profile_picture, :alt => @challenger.full_name, :class => 'portrait'
                %td.player-opponent
                  .name= @challenger.full_name
                  .scores
                    %span.loose= t 'challenge.title.loose_count', :count => @challenger.total_victories
                    = " / "
                    %span.respect= t 'challenge.title.respect_count', :count => @challenger.total_defeats
        %tr
          %td.play-field{:colspan => 2}
            #game
          %td.sidebar
            %ul.tabs
              %li.last
                %a{:href => 'javascript:void(0)'}= t 'challenge.right.history.title'
            .panes
              .pane#messages
                = render :partial => 'challenge_messages'
        %tr.bottom
          %td.bar-scores
          %td.bar-scores
          %td.bar-stats
            .header
              = t 'challenge.stats.friends_stats'
            .stat
              .section= t 'challenge.stats.games'
              .value= t 'challenge.stats.victories_friend', :count => @me.total_victories_with(@challenger)
              .value= t 'challenge.stats.defeats_friend', :count => @me.total_defeats_with(@challenger)
            .stat
              .section= t 'challenge.stats.rounds_title'
              .value= t 'challenge.stats.rounds_total', :count => @me.total_rounds_with(@challenger)
            .stat
              .section= t 'challenge.stats.total_beers'
              .value
                = image_tag 'mini-biere.png', :alt => t('beers')
                = number_with_delimiter(@me.total_score_with(@challenger))
            %br
            .header
              = t 'challenge.stats.global_stats'
            .stat
              .section= t 'challenge.stats.games'
              .value= t 'challenge.stats.victories_global', :count => @me.total_victories
              .value= t 'challenge.stats.defeats_global', :count => @me.total_defeats
            .stat
              .section= t 'challenge.stats.rounds_title'
              .value= t 'challenge.stats.rounds_total', :count => @me.total_rounds
            .stat
              .section= t 'challenge.stats.total_beers'
              .value
                = image_tag 'mini-biere.png', :alt => t('beers')
                = number_with_delimiter(@me.total_score_challenge)
    %td.small.shadow
  %tr.small
    %td.small
    %td.shadow
    %td.small.shadow

#message-dialog{:title => t('challenge.endgame.message.title')}
  %textarea#message-content.invalid{:rows => 3, :cols => 50}

= form_tag start_challenge_path(@challenge.sent_by.id), :method => 'post', :id => 'rechallenge-form'

:javascript
  $(function() {
    $('#game').flash({
      swf: "/swf/BeerQuest-#{Game::Constants::VERSION}.swf",
      width: 520,
      height: 320,
      flashvars: {
        mode: "#{@mode}",
        lang: "#{I18n.locale}",
        token: "#{@replay.token}",
        requiredVersion: #{Game::Constants::VERSION},
        goal: #{@challenge.required_score}
      }
    });
    $('#message-dialog').dialog({
      autoOpen: false,
      modal: true,
      resizable: false,
      position: [125, 320],
      buttons: {
        "#{t('challenge.endgame.message.button')}": function() {
          $.post("#{endgame_message_url}", {
            token: "#{@replay.token}",
            message: $('#message-content').val()
          }, function() {
            $.get("#{async_challenge_messages_url(@challenge)}");
          });
          $(this).dialog('close');
        }
      },
      close: function() {
        $.get("#{async_challenge_messages_url(@challenge)}");
      }
    });
    $('#message-content').bind('keyup change', function()
    {
      var len = $(this).val().length;
      if (len >= 5 && len <= 160)
      {
        $(this).removeClass('invalid');
      }
      else
      {
        $(this).addClass('invalid');
      }
    });
  });

  function endOfGame(mode, score, scoreGoal, personalHigh, barHigh)
  {
    /*if (mode == 'vs' && score >= scoreGoal)
    {
      setTimeout(function() {
        $('#message-dialog').dialog('open');
      }, 3000);
    }*/
  }

  function vsBoastVictory(score, goal)
  {
    var url = "#{BeerQuest::FB_APP_URL}#{home_path}";
    var attachment = {
                       name: "#{t('challenge.endgame.boast_victory.post_title')}",
                       href: url,
                       description: "#{t('challenge.endgame.boast_victory.post_message_pre')}" + goal + "#{t('challenge.endgame.boast_victory.post_message_post')}",
                       media: [
                         {
                           type: 'image',
                           src: "#{static_asset_url('bq-90x90.png')}",
                           href: url
                         }
                       ]
                     };
    var links = [
                  {
                    text: "#{t('challenge.endgame.boast_victory.action')}",
                    href: url
                  }
                ];
    FB.ui(
    {
       method: "stream.publish",
       user_message_prompt: "#{t('challenge.endgame.boast_victory.prompt')}",
       attachment: attachment,
       action_links: links
    });
  }

  function vsBoastDefeat(score, goal)
  {
    var url = "#{BeerQuest::FB_APP_URL}#{home_path}";
    var attachment = {
                       name: "#{t('challenge.endgame.boast_defeat.post_title')}",
                       href: url,
                       description: "#{t('challenge.endgame.boast_defeat.post_message_pre')}" + goal + "#{t('challenge.endgame.boast_defeat.post_message_mid')}" + score + "#{t('challenge.endgame.boast_defeat.post_message_post')}",
                       media: [
                         {
                           type: 'image',
                           src: "#{static_asset_url('bq-90x90.png')}",
                           href: url
                         }
                       ]
                     };
    var links = [
                  {
                    text: "#{t('challenge.endgame.boast_defeat.action')}",
                    href: url
                  }
                ];
    FB.ui(
    {
       method: "stream.publish",
       user_message_prompt: "#{t('challenge.endgame.boast_defeat.prompt')}",
       attachment: attachment,
       action_links: links
    });
  }

  function vsProvoke(goal)
  {
    var url = "#{BeerQuest::FB_APP_URL}#{accept_challenge_path(@me.id)}";
    var attachment = {
                       name: "#{t('challenge.endgame.provoke.post_title')}",
                       href: url,
                       description: "#{t('challenge.endgame.provoke.post_message_pre')}" + goal + "#{t('challenge.endgame.provoke.post_message_post')}",
                       media: [
                         {
                           type: 'image',
                           src: "#{static_asset_url('bq-90x90.png')}",
                           href: url
                         }
                       ]
                     };
    var links = [
                  {
                    text: "#{t('challenge.endgame.provoke.action')}",
                    href: url
                  }
                ];
    FB.ui(
    {
       method: "stream.publish",
       target_id: #{@challenge.sent_by.facebook_id},
       user_message_prompt: "#{t('challenge.endgame.provoke.prompt')}",
       attachment: attachment,
       action_links: links
    });
  }

  function vsPlayAgain()
  {
    $('#rechallenge-form').submit();
  }
