<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:ui="com.beerquest.ui.*"
               creationComplete="init()"
               width="520" height="320">
    <fx:Style>
        @namespace mx "library://ns.adobe.com/flex/mx";

        @font-face
        {
            src: url("../../../assets/font/kronika.ttf")
        ;
            fontFamily: Kro
        ;
            embedAsCFF: false
        ;
            advancedAntiAliasing: true
        ;
        }

        mx|ToolTip {
            fontFamily: Kro;
            fontSize: 14;
            color: black;
            backgroundColor: #ff0000;
        }

        .gameOver {
            fontFamily: Kro;
            fontSize: 48;
            color: #ff0000;
            textAlign: center;
        }
    </fx:Style>
    <fx:Script><![CDATA[
        import com.adobe.serialization.json.JSON;
        import com.beerquest.Capacity;
        import com.beerquest.Constants;
        import com.beerquest.PlayerData;
        import com.beerquest.TokenType;
        import com.beerquest.events.CapacityEvent;
        import com.beerquest.events.GameEvent;
        import com.beerquest.ui.events.UiCapacityExecutionEvent;
        import com.beerquest.ui.events.UiGameEvent;
        import com.beerquest.ui.events.UiScoreEvent;
        import com.beerquest.ui.events.UiTokenEvent;
        import com.greensock.OverwriteManager;
        import com.greensock.TweenLite;
        import com.greensock.plugins.ColorTransformPlugin;
        import com.greensock.plugins.TintPlugin;
        import com.greensock.plugins.TweenPlugin;

        import mx.controls.Alert;
        import mx.core.FlexGlobals;

        private function init():void {
            // Init TweenLite
            OverwriteManager.init();
            TweenPlugin.activate([ColorTransformPlugin, TintPlugin]);

            // Parameters passed to game
            _allowStart = true;
            var requiredVersion:Number = FlexGlobals.topLevelApplication.parameters.requiredVersion;
            if (requiredVersion > 0) {
                if (requiredVersion > Constants.VERSION) {
                    _allowStart = false;
                    Alert.show("Current: " + Constants.VERSION + "\nRequired: " + requiredVersion + "\n\nPlease empty your cache and reload this page.", "Wrong version");
                }
            } else {
                trace("WARN: No 'requiredVersion' found");
            }

            _mode = FlexGlobals.topLevelApplication.parameters.mode;
            if (_mode != "vs" && _mode != "solo") {
                trace("WARN: No proper 'mode' found");
                _mode = "solo";
                _allowStart = false;
            }
            trace("Starting in mode: " + _mode);

            token = FlexGlobals.topLevelApplication.parameters.token;
            if (token == null) {
                trace("WARN: No 'token' found");
                token = "none";
                _allowStart = false;
                startGame(_mode, new PlayerData(Constants.GAME), Math.random());
            }
            trace("Using the following API token: " + token);

            // Retrieve game info from server using token
            var request:URLRequest = new URLRequest("/start?token=" + token);
            request.method = URLRequestMethod.GET;
            _tokenLoader = new URLLoader();
            _tokenLoader.addEventListener(Event.COMPLETE, onStartInfoReceived);
            try {
                _tokenLoader.load(request);
                trace("Load game infos requested.");
            } catch (e:ArgumentError) {
                trace("Load game infos: an ArgumentError has occurred.");
            } catch (e:SecurityError) {
                trace("Load game infos: a SecurityError has occurred.");
            }
        }

        private function startGame(mode:String, me:PlayerData, seed:int):void {
            addEventListener(UiGameEvent.UI_GAME_EVENT, onUiGameEvent);
            Constants.GAME.addEventListener(GameEvent.VOMIT, onInstantGameEvent);
            Constants.GAME.addEventListener(GameEvent.PISS, onInstantGameEvent);
            Constants.GAME.addEventListener(GameEvent.BEER_COLLECTED, onInstantGameEvent);
            Constants.GAME.addEventListener(CapacityEvent.CAPACITY_GAINED, onInstantGameEvent);
            Constants.GAME.addEventListener(CapacityEvent.CAPACITY_EXECUTED, onInstantGameEvent);
            Constants.GAME.start(mode, me, seed);
            if (!_allowStart && !Constants.DEBUG) {
                Constants.GAME.endOfGame();
            }
        }

        private function onInstantGameEvent(e:Event):void {
            dispatchEvent(new UiGameEvent(e));
        }

        private function onUiGameEvent(e:UiGameEvent):void {
            if (e.event.type == GameEvent.GAME_OVER) {
                gameOver();
            }
        }

        private function onStartInfoReceived(e:Event):void {
            trace("Game infos received.");
            var data:Object = JSON.decode(_tokenLoader.data);
            trace("Seed is " + data.seed);
            _tokenLoader.removeEventListener(Event.COMPLETE, onStartInfoReceived);
            _tokenLoader = null;
            startGame(_mode, new PlayerData(Constants.GAME), data.seed);
        }

        private function gameOver():void {
            TweenLite.to(gameover, 2, {y:0});
        }

        private function onScoreGained(e:UiScoreEvent):void {
            var x:Number, y:Number;
            if (e.capacity != null) {
                var capaLoc:Point = myStatus.locateCapacity(e.capacity);
                x = capaLoc.x;
                y = capaLoc.y;
            } else {
                x = e.stageX;
                y = e.stageY;
            }
            vfxLayer.addScoreEffect(e.beers, e.turns, x, y);
        }

        private function onTokenGained(e:UiTokenEvent):void {
            var entryPoint:Point = myStatus.tokenEntryPoint;
            var token:TokenType = e.token;
            vfxLayer.addTokenEffect(token, e.stageX, e.stageY, entryPoint.x, entryPoint.y);
            var timer:Timer = new Timer(EffectLayer.TOKEN_EFFECT_TIME_MS, 1);
            timer.addEventListener(TimerEvent.TIMER, function(e:TimerEvent):void {
                myStatus.addCollectedToken(token);
            });
            timer.start();
        }

        private function onAskForExecution(e:UiCapacityExecutionEvent):void {
            if (e.capacity == Capacity.BIG_BANG) {
                boardView.processEvent(e);
            } else {
                Constants.GAME.executeCapacity(e.capacity);
            }
        }

        [Bindable]
        public function get token():String {
            return _token;
        }

        [Bindable]
        public function set token(value:String):void {
            _token = value;
        }

        private var _token:String;
        private var _tokenLoader:URLLoader;
        private var _mode:String;
        private var _allowStart:Boolean;
        ]]></fx:Script>

    <!-- board -->
    <mx:Canvas x="200" y="0" width="320" height="320">
        <ui:BoardView id="boardView" UiScoreGained="onScoreGained(event)" UiTokenGained="onTokenGained(event)"/>
        <mx:Canvas id="gameover" width="100%" height="100%" backgroundColor="black" y="{-boardView.height}">
            <mx:Label y="120" text="Game Over" width="100%" styleName="gameOver"/>
        </mx:Canvas>
    </mx:Canvas>

    <!-- status bar -->
    <ui:PlayerStatusView id="myStatus" x="5" y="5" AskForExecution="onAskForExecution(event)"/>
    <ui:SoundButton id="soundButton" x="140" y="292" on="true"/>
    <ui:QualityButton x="170" y="292" on="true"/>

    <!-- modules -->
    <ui:SoundModule soundEnabled="{soundButton.on}"/>
    <ui:StatsModule token="{token}"/>

    <!-- vfx layer -->
    <ui:EffectLayer id="vfxLayer" width="100%" height="100%"/>

    <!-- debug -->
    <mx:Label text="Available moves: {boardView.availableMoves}" x="0" y="0" visible="{Constants.DEBUG}"/>
    <mx:Label text="Current action: {boardView.currentAction}" x="0" y="32" visible="{Constants.DEBUG}"/>
    <mx:Label x="0" y="300" text="Version {Constants.VERSION} - DEBUG" color="0xff0000" fontWeight="bold" fontSize="14"
              visible="{Constants.DEBUG}"/>
</s:Application>
