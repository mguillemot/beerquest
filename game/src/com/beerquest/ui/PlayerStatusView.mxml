<?xml version="1.0"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
         xmlns:ui="com.beerquest.ui.*"
         width="185" horizontalAlign="center" verticalGap="0"
         creationComplete="init()">
    <mx:Style>
        .score {
            fontFamily: Kro;
            fontSize: 28;
            color: white;
            textAlign: right;
        }

        .remaining-turns {
            fontSize: 18;
            color: white;
            textAlign: center;
        }
    </mx:Style>
    <mx:Metadata>
        [Event(name="AskForExecution", type="com.beerquest.ui.events.UiCapacityExecutionEvent")]
    </mx:Metadata>
    <mx:Script><![CDATA[
        import com.beerquest.Capacity;
        import com.beerquest.Constants;
        import com.beerquest.I18n;
        import com.beerquest.TokenType;
        import com.beerquest.events.CapacityEvent;
        import com.beerquest.events.GameEvent;
        import com.beerquest.events.TokenEvent;
        import com.beerquest.events.ValueChangedEvent;
        import com.beerquest.ui.events.UiGameEvent;
        import com.greensock.TweenLite;

        private function init():void {
            parent.addEventListener(UiGameEvent.UI_GAME_EVENT, onUiGameEvent);
        }

        private function onUiGameEvent(e:UiGameEvent):void {
            var event:Event = e.event;
            switch (event.type) {
                case GameEvent.GAME_START:
                    if (Constants.GAME.scoreGoal > 0) {
                        scoreLabel.text = "0/" + Constants.GAME.scoreGoal;
                    } else {
                        scoreLabel.text = "0";
                    }
                    break;
                case TokenEvent.TOKEN_ADDED:
                    // Note: pas besoin d'ajouter le token puisque c'est le BeerQuestView qui s'en chargera Ã  la fin de l'animation de collecte de token
                    updateArrow();
                    break;
                case TokenEvent.TOKEN_GROUP_COLLECTED:
                    onBeerCollected();
                    updateArrow();
                    break;
                case TokenEvent.TOKEN_EJECTED:
                    updateArrow();
                    break;
                case ValueChangedEvent.SCORE_CHANGED:
                    onScoreChanged(event as ValueChangedEvent);
                    break;
                case ValueChangedEvent.REMAINING_TURNS_CHANGED:
                    onRemainingTurnsChanged(event as ValueChangedEvent);
                    break;
                case ValueChangedEvent.VOMIT_CHANGED:
                    onVomitChanged(event as ValueChangedEvent);
                    break;
                case ValueChangedEvent.PISS_CHANGED:
                    onPissChanged(event as ValueChangedEvent);
                    break;
                case CapacityEvent.CAPACITY_GAINED:
                    onCapacityGained(event as CapacityEvent);
                    break;
                case CapacityEvent.CAPACITY_EXECUTED:
                    onCapacityExecuted(event as CapacityEvent);
                    break;
            }
        }

        private function onCapacityGained(e:CapacityEvent):void {
            if (e.slot == 1) {
                capa1.capacity = e.capacity;
                capa1.clickable = true;
            } else {
                capa0.capacity = e.capacity;
                capa0.clickable = true;
            }
        }

        private function onCapacityExecuted(e:CapacityEvent):void {
            if (e.slot == 1) {
                capa1.capacity = Capacity.NONE;
                capa1.clickable = false;
            } else {
                capa0.capacity = Capacity.NONE;
                capa0.clickable = false;
            }
        }

        private function onRemainingTurnsChanged(e:ValueChangedEvent):void {
            remainingTurnsBar.progress = e.newValue / Constants.GAME.initialTurns * 100;
            remainingTurnsLabel.text = e.newValue.toString();
        }

        private function onVomitChanged(e:ValueChangedEvent):void {
            vomitBar.progress = e.newValue;
            vomitLabel.text = e.newValue.toString();
        }

        private function onPissChanged(e:ValueChangedEvent):void {
            pissBar.progress = e.newValue;
            pissLabel.text = e.newValue.toString();
            wcButton.visible = (e.newValue >= 80);
        }

        public function get tokenEntryPoint():Point {
            return stack.stageEntryPoint;
        }

        public function locateCapacity(capacity:Capacity):Point {
            if (Constants.GAME.me.capacities[1] == capacity) {
                return localToGlobal(new Point(capa1.x + capa1.width / 2, capa1.y + capa1.height / 2));
            } else {
                return localToGlobal(new Point(capa0.x + capa0.width / 2, capa0.y + capa0.height / 2));
            }
        }

        public function addCollectedToken(token:TokenType):void {
            stack.pushTokenIntoStack(token);
        }

        private function onBeerCollected():void {
            vfx.y = -vfx.height / 2 + 30;
            vfx.alpha = 1;
            TweenLite.to(vfx, 1, {alpha:0, y:"-20"});
        }

        private function updateArrow():void {
            // TODO lier au comportement de la stack visuelle, et non de la stack ingame
            switch (Constants.GAME.me.stackCompletion) {
                case 1:
                    arrow.source = Arrow1;
                    break;
                case 2:
                    arrow.source = Arrow2;
                    break;
                case 3:
                    arrow.source = Arrow3;
                    break;
                default:
                    arrow.source = Arrow0;
                    break;
            }
        }

        private function onScoreChanged(e:ValueChangedEvent):void {
            if (Constants.GAME.scoreGoal > 0) {
                scoreLabel.text = e.newValue + "/" + Constants.GAME.scoreGoal;
            } else {
                scoreLabel.text = e.newValue.toString();
            }
            scoreIcon.scaleX = scoreIcon.scaleY = 1;
            var tween:TweenLite = new TweenLite(scoreIcon, 0.3, {scaleX:1.1, scaleY:1.1, onComplete:function():void {
                tween.reverse();
            }});
        }

        private function onMouseOverPiss(e:Event):void {
            if (!Constants.GAME.gameOver) {
                wcButton.source = WcIconHover;
            }
        }

        private function onMouseOutPiss(e:Event):void {
            wcButton.source = WcIcon;
        }

        private function onClickPiss(e:Event):void {
            if (!Constants.GAME.gameOver) {
                Constants.GAME.me.doPiss();
            }
        }

        private function and(a:Boolean, b:Boolean):Boolean {
            return (a && b);
        }

        [Embed(source="../../../assets/image/wc-actif.png")]
        private static var WcIcon:Class;

        [Embed(source="../../../assets/image/wc-over.png")]
        private static var WcIconHover:Class;

        [Embed(source="../../../assets/image/fleche-0.png")]
        private static var Arrow0:Class;

        [Embed(source="../../../assets/image/fleche-1.png")]
        private static var Arrow1:Class;

        [Embed(source="../../../assets/image/fleche-2.png")]
        private static var Arrow2:Class;

        [Embed(source="../../../assets/image/fleche-3.png")]
        private static var Arrow3:Class;
        ]]></mx:Script>
    <mx:NumberFormatter id="scoreFormatter" useThousandsSeparator="true" decimalSeparatorTo=","
                        thousandsSeparatorTo="."/>

    <mx:Canvas width="100%" toolTip="{I18n.t('turns-bar.tooltip')}">
        <ui:ProgressBar x="12" y="12" width="170" height="16"
                        id="remainingTurnsBar"
                        emptyColor="0x00789f"
                        fullColorLight="0x00bbf9" fullColorDark="0x0098d6"/>
        <mx:Image source="@Embed(source='../../../assets/image/barre-tours.png')"/>
        <mx:Label y="3" width="30" id="remainingTurnsLabel" text="{Constants.DEFAULT_INITIAL_TURNS}"
                  styleName="remaining-turns">
            <mx:filters>
                <mx:GlowFilter blurX="3" blurY="3" alpha="1" color="0x000000" quality="3"/>
            </mx:filters>
        </mx:Label>
    </mx:Canvas>

    <mx:Spacer height="5"/>

    <mx:Canvas width="100%" toolTip="{I18n.t('vomit-bar.tooltip')}">
        <ui:ProgressBar x="12" y="12" width="170" height="16"
                        id="vomitBar"
                        emptyColor="0x619f00"
                        fullColorLight="0xbbf900" fullColorDark="0x82d500" alert="true"/>
        <mx:Image source="@Embed(source='../../../assets/image/barre-vomi.png')"/>
        <mx:Label id="vomitLabel" text="0" fontSize="24" color="red" visible="{Constants.DEBUG}"/>
    </mx:Canvas>

    <mx:Spacer height="5"/>

    <mx:Canvas width="100%" toolTip="{I18n.t('piss-bar.tooltip')}">
        <ui:ProgressBar x="12" y="12" width="170" height="16"
                        id="pissBar"
                        emptyColor="0x9f9600"
                        fullColorLight="0xfbe400" fullColorDark="0xcd1be00"/>
        <mx:Image x="60" y="3" id="wcButton" source="{WcIcon}" mouseOver="onMouseOverPiss(event)"
                  mouseOut="onMouseOutPiss(event)" click="onClickPiss(event)"
                  visible="false"/>
        <mx:Image source="@Embed(source='../../../assets/image/barre-pisse.png')"/>
        <mx:Label id="pissLabel" text="0" fontSize="24" color="red" visible="{Constants.DEBUG}"/>
    </mx:Canvas>

    <mx:Spacer height="10"/>

    <mx:Canvas width="100%">
        <mx:Image source="@Embed(source='../../../assets/image/fond-score-srack.png')"/>
        <mx:Canvas toolTip="{I18n.t('score.tooltip')}">
            <mx:Canvas x="0" y="2" width="125">
                <mx:Label id="scoreLabel" text="0" width="100%" styleName="score">
                    <mx:filters>
                        <mx:DropShadowFilter distance="2" angle="45" blurX="0" blurY="0" alpha="1" color="0x111111"/>
                    </mx:filters>
                </mx:Label>
            </mx:Canvas>
            <mx:Image id="scoreIcon" x="130" y="7" source="@Embed(source='../../../assets/image/collected-beer.png')"/>
        </mx:Canvas>
        <mx:Canvas x="4" y="57" width="170" height="11" backgroundColor="0x000000" backgroundAlpha="0"
                   toolTip="{I18n.t('tokens.tooltip')}">
            <ui:TokenCollectionView id="stack"/>
        </mx:Canvas>
        <mx:Image id="arrow" x="161" y="33" source="{Arrow0}"/>
        <ui:FullBeerFx id="vfx" x="{-vfx.width / 2 + 140}" y="{-vfx.height / 2 + 30}" alpha="0" value="5"/>
    </mx:Canvas>

    <mx:Spacer height="10"/>

    <ui:CapacityView id="capa0" capacity="{Capacity.NONE}" clickable="false"/>
    <ui:CapacityView id="capa1" capacity="{Capacity.NONE}" clickable="false"/>
</mx:VBox>
