<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:ui="com.beerquest.ui.*"
               creationComplete="init()"
               width="760" height="612">
    <fx:Style>
        @namespace
        mx
        "library://ns.adobe.com/flex/mx"
        ;

        @font-face
        {
            src: url("kronika.ttf")
        ;
            fontFamily: Kro
        ;
            embedAsCFF: false
        ;
            advancedAntiAliasing: true
        ;
        }

        mx|ToolTip {
            fontFamily: Kro;
            fontSize: 14;
            color: black;
            backgroundColor: #ff0000;
        }

        .game-type {
            fontFamily: Kro;
            fontSize: 16;
            color: #753e00;
        }

        .gameOver {
            fontFamily: Kro;
            fontSize: 48;
            color: #ff0000;
            textAlign: center;
        }

        .currentTime {
            fontSize: 32px;
            fontWeight: bold;
            textAlign: center;
        }

        .remainingTurns {
            fontSize: 12px;
            fontWeight: bold;
            textAlign: center;
        }
    </fx:Style>
    <fx:Script><![CDATA[
        import com.adobe.serialization.json.JSON;
        import com.beerquest.Constants;
        import com.beerquest.Game;
        import com.beerquest.PlayerData;
        import com.beerquest.events.BeerCollectedEvent;
        import com.beerquest.events.CapacityEvent;
        import com.beerquest.events.GameEvent;
        import com.beerquest.events.GemsSwappedEvent;
        import com.beerquest.events.PissEvent;
        import com.beerquest.events.ScoreEvent;
        import com.beerquest.events.TokenEvent;
        import com.beerquest.events.VomitEvent;
        import com.greensock.OverwriteManager;

        import mx.controls.Alert;
        import mx.core.FlexGlobals;

        private function init():void {
            OverwriteManager.init();

            addEventListener(CapacityEvent.CAPACITY_GAINED, onGameEvent);
            addEventListener(PissEvent.PISS, onGameEvent);
            addEventListener(ScoreEvent.CAPS_GAINED, onCapsGained);
            addEventListener(TokenEvent.TOKEN_GAINED, onTokenGained);

            /*try {
             ExternalInterface.addCallback("testJs", testJs);
             } catch (e:Error) {
             trace("Impossible to connect to ExternalInterface.")
             } */

            var freezeGame:Boolean = false;
            var requiredVersion:Number = FlexGlobals.topLevelApplication.parameters.requiredVersion;
            if (requiredVersion > 0) {
                if (requiredVersion > Constants.VERSION) {
                    freezeGame = true;
                    Alert.show("Current: " + Constants.VERSION + "\nRequired: " + requiredVersion + "\n\nPlease empty your cache and reload this page.", "Wrong version");
                }
            } else {
                trace("WARN: No 'requiredVersion' found");
                if (!Constants.DEBUG) {
                    freezeGame = true;
                }
            }

            var mode:String = FlexGlobals.topLevelApplication.parameters.mode;
            if (mode == null || (mode != "vs" && mode != "solo")) {
                trace("WARN: No proper 'mode' found");
                mode = "solo";
                if (!Constants.DEBUG) {
                    freezeGame = true;
                }
            }

            serverUrl = FlexGlobals.topLevelApplication.parameters.serverUrl;
            if (serverUrl == null) {
                trace("WARN: No 'serverUrl' found");
                serverUrl = "http://localhost:81/postscore";
                if (!Constants.DEBUG) {
                    freezeGame = true;
                }
            }
            trace("Using the following server URL: " + serverUrl);

            var meData:PlayerData;
            var meParam:String = FlexGlobals.topLevelApplication.parameters.me;
            if (meParam != null) {
                var me:Object = JSON.decode(meParam);
                meData = new PlayerData(me.id, me.name, me.title, me.avatar, me.level, me.total_beers, me.total_caps);
            } else {
                trace("WARN: No 'me' found");
                meData = new PlayerData(0, "Mattiou Guillegay", "Le Saint-Bernard", "http://profile.ak.fbcdn.net/v227/369/75/q1308311126_5056.jpg", 42, 12345, 1000042);
                if (!Constants.DEBUG) {
                    freezeGame = true;
                }
            }

            var opponentData:PlayerData = null;
            if (mode == "vs") {
                var opponentParam:String = FlexGlobals.topLevelApplication.parameters.opponent;
                if (opponentParam != null) {
                    var opponent:Object = JSON.decode(opponentParam);
                    opponentData = new PlayerData(opponent.id, opponent.name, opponent.title, opponent.avatar, opponent.level, opponent.total_beers, opponent.total_caps);
                } else {
                    trace("WARN: No 'opponent' found");
                    opponentData = new PlayerData(0, "Jeano Babouin", "Le bois-sans-soif", "http://profile.ak.fbcdn.net/v227/369/75/q1308311126_5056.jpg", 89, 555, 100000);
                    if (!Constants.DEBUG) {
                        freezeGame = true;
                    }
                }
            }

            var barName:String, barLocation:String, barBanner:String, barOpen:String, barClose:String;
            var barParam:String = FlexGlobals.topLevelApplication.parameters.bar;
            if (barParam != null) {
                var bar:Object = JSON.decode(barParam);
                barName = bar.name;
                barLocation = bar.location;
                barBanner = bar.banner;
                barOpen = bar.open;
                barClose = bar.close;
            } else {
                trace("WARN: No 'bar' found, initializing game with default value");
                barName = "Le Des-Murges Bar";
                barLocation = "Paris - France";
                barBanner = "http://erhune.iobb.net/images/banner.jpg";
                barOpen = "21:00";
                barClose = "2:00";
                if (!Constants.DEBUG) {
                    freezeGame = true;
                }
            }

            var highScores:Array = new Array();
            var highScoresParam:String = FlexGlobals.topLevelApplication.parameters.highScores;
            if (highScoresParam != null) {
                var highScoresJson:Array = JSON.decode(highScoresParam) as Array;
                for each (var highScoreJson:Object in highScoresJson) {
                    highScores.push({firstName:highScoreJson.firstName, lastName:highScoreJson.lastName, avatar:highScoreJson.avatar, score:highScoreJson.score, rank:highScoreJson.rank, me:highScoreJson.me});
                }
            } else {
                trace("WARN: No 'highScores' found, initializing game with default value");
                highScores.push({firstName:"Dark", lastName:"Vador", avatar:"http://profile.ak.fbcdn.net/v227/369/75/q1308311126_5056.jpg", score:199, rank:1, me:false});
                highScores.push({firstName:"Matthieu", lastName:"Guillemot", avatar:"http://profile.ak.fbcdn.net/v227/369/75/q1308311126_5056.jpg", score:60, rank:2, me:true});
                highScores.push({firstName:"Pierre-Olivier", lastName:"Ducoing", avatar:"http://profile.ak.fbcdn.net/v227/369/75/q1308311126_5056.jpg", score:55, rank:3, me:false});
                highScores.push({firstName:"Hakurei", lastName:"Reimu", avatar:"http://profile.ak.fbcdn.net/v227/369/75/q1308311126_5056.jpg", score:52, rank:4, me:false});
                highScores.push({firstName:"Kirisame", lastName:"Marisa", avatar:"http://profile.ak.fbcdn.net/v227/369/75/q1308311126_5056.jpg", score:42, rank:5, me:false});
                if (!Constants.DEBUG) {
                    freezeGame = true;
                }
            }

            game = new Game(mode, meData, opponentData, barName, barLocation, barOpen, barClose, highScores);
            if (freezeGame) {
                game.gameOver = true;
            }
            game.addEventListener(GameEvent.GAME_OVER, onGameOver);
            if (game.mode == "solo") {
                modeHeader.source = MurgeSolo;
            } else if (game.mode == "vs") {
                modeHeader.source = BattleBiture;
            }

            var loader:Loader = new Loader();
            banner.addChild(loader);
            loader.load(new URLRequest(barBanner));
        }

        private function onGameEvent(e:GameEvent):void {
            game.handleEvent(e);
        }

        private function onGameOver(e:GameEvent):void {
            if (!scoresSent && game.me.id > 0) {
                // Transmit score & stats to the server
                var data:URLVariables = Constants.STATS.getForSerialization();
                data.mode = game.mode;
                data.game_version = Constants.VERSION.toString();
                data.score = game.me.fullBeers;
                data.caps = game.me.score;
                data.flash_version = Capabilities.version;

                var request:URLRequest = new URLRequest(serverUrl);
                request.method = URLRequestMethod.POST;
                request.data = data;
                var loader:URLLoader = new URLLoader();
                loader.addEventListener(Event.COMPLETE, onScorePosted);
                try {
                    loader.load(request);
                    trace("Score posted.");
                } catch (e:ArgumentError) {
                    trace("Post score: an ArgumentError has occurred.");
                } catch (e:SecurityError) {
                    trace("Post score: a SecurityError has occurred.");
                }

                scoresSent = true;
            }
        }

        private function onCapsGained(e:ScoreEvent):void {
            vfxLayer.addScoreEffect(e.quantity, e.stageX, e.stageY);
        }

        private function onTokenGained(e:TokenEvent):void {
            var entryPoint:Point = myStatus.tokenEntryPoint;
            vfxLayer.addTokenEffect(e.token, e.stageX, e.stageY, entryPoint.x, entryPoint.y);
        }

        private function onScorePosted(e:Event):void {
            Alert.show("Score uploaded.");
        }

        /*public function testJs():void {
         Alert.show("coucou de la part du JS!!");
         }

         private function sendAjax():void {
         var request:URLRequest = new URLRequest("/account");
         //            request.contentType = "text/xml";
         //            request.data = dataXML.toXMLString();
         //            request.method = URLRequestMethod.POST;
         var loader:URLLoader = new URLLoader();
         loader.addEventListener(Event.COMPLETE, completeHandler);
         try {
         loader.load(request);
         trace("Request sent.");
         } catch (e:ArgumentError) {
         trace("An ArgumentError has occurred.");
         } catch (e:SecurityError) {
         trace("A SecurityError has occurred.");
         }
         }

         /private function completeHandler(event:Event):void
         {
         trace("Request completed.");
         var loader:URLLoader = URLLoader(event.target);
         var variables:URLVariables = new URLVariables(loader.data);
         Alert.show("toto=" + variables.toto);
         }

         private function callJs():void {
         try {
         ExternalInterface.call("callFromFlex", "plup");
         } catch (e:Error) {
         trace("Impossible to connect to ExternalInterface.")
         }
         } */

        [Bindable]
        public var game:Game;

        private var serverUrl:String;
        private var scoresSent:Boolean = false;

        [Embed(source="battle-biture.png")]
        private static var BattleBiture:Class;

        [Embed(source="murge-solitaire.png")]
        private static var MurgeSolo:Class;

        ]]></fx:Script>
    <mx:Image id="banner" x="0" y="492" width="771" height="144"/>
    <mx:Image source="@Embed(source='fond-jeu.png')"/>
    <mx:Label x="600" y="0" text="Version {Constants.VERSION} - DEBUG" color="0xff0000" fontWeight="bold" fontSize="14"
              visible="{Constants.DEBUG}">
        <mx:filters>
            <mx:DropShadowFilter distance="2" angle="45" blurX="0" blurY="0" alpha="1" color="0x111111"/>
        </mx:filters>
    </mx:Label>
    <ui:PlayerDataView x="20" y="20" player="{game.me}"/>
    <ui:PlayerDataView x="435" y="55" player="{game.opponent}" mirror="true" visible="{game.mode == 'vs'}"/>
    <mx:VBox x="220" y="25" width="320" horizontalAlign="center" verticalGap="0">
        <mx:Image id="modeHeader"/>
        <mx:Spacer height="15"/>
        <mx:Image source="@Embed(source='vs.png')" visible="{game.mode == 'vs'}"/>
        <mx:HBox verticalAlign="middle" horizontalGap="2" visible="{game.mode == 'vs'}">
            <mx:Label text="Duel" styleName="game-type"/>
            <mx:Image source="@Embed(source='collected-beer-small.png')"/>
            <mx:Label text="152" styleName="game-type"/>
        </mx:HBox>
    </mx:VBox>
    <ui:PlayerStatusView id="myStatus" x="25" y="135" game="{game}" player="{game.me}"/>
    <ui:PlayerStatusView x="560" y="165" game="{game}" player="{game.opponent}" clickable="false"
                         visible="{game.mode == 'vs'}"/>
    <mx:VBox x="545" y="20" width="196" horizontalAlign="center" verticalGap="8" visible="{game.mode == 'solo'}">
        <mx:Image source="@Embed(source='bar-scrores.png')"/>
        <mx:Spacer height="5"/>
        <ui:ScoreView personal="{game.highScores[0].me}" firstName="{game.highScores[0].firstName}"
                      lastName="{game.highScores[0].lastName}" avatarUrl="{game.highScores[0].avatar}"
                      score="{game.highScores[0].score}" rank="{game.highScores[0].rank}"/>
        <ui:ScoreView personal="{game.highScores[1].me}" firstName="{game.highScores[1].firstName}"
                      lastName="{game.highScores[1].lastName}" avatarUrl="{game.highScores[1].avatar}"
                      score="{game.highScores[1].score}" rank="{game.highScores[1].rank}"/>
        <ui:ScoreView personal="{game.highScores[2].me}" firstName="{game.highScores[2].firstName}"
                      lastName="{game.highScores[2].lastName}" avatarUrl="{game.highScores[2].avatar}"
                      score="{game.highScores[2].score}" rank="{game.highScores[2].rank}"/>
        <ui:ScoreView personal="{game.highScores[3].me}" firstName="{game.highScores[3].firstName}"
                      lastName="{game.highScores[3].lastName}" avatarUrl="{game.highScores[3].avatar}"
                      score="{game.highScores[3].score}" rank="{game.highScores[3].rank}"/>
        <ui:ScoreView personal="{game.highScores[4].me}" firstName="{game.highScores[4].firstName}"
                      lastName="{game.highScores[4].lastName}" avatarUrl="{game.highScores[4].avatar}"
                      score="{game.highScores[4].score}" rank="{game.highScores[4].rank}"/>
    </mx:VBox>
    <mx:Label text="Available moves: {boardView.availableMoves}" x="10" y="10" visible="{Constants.DEBUG}"/>
    <mx:Label text="Combo: {boardView.combo}" x="10" y="30" visible="{Constants.DEBUG}"/>
    <mx:Label text="Sous-bocks: {game.me.coasterReserve}" x="10" y="50" visible="{Constants.DEBUG}"/>
    <mx:Canvas x="220" y="110" width="320" height="320">
        <ui:BoardView id="boardView" width="100%" height="100%" game="{game}" playable="{game.gameOver}"/>
        <mx:Canvas width="100%" height="100%" backgroundColor="black" alpha="0.8" visible="{game.gameOver}">
            <mx:Label y="120" text="Game Over" width="100%" styleName="gameOver"/>
        </mx:Canvas>
    </mx:Canvas>
    <!--<mx:Label x="10" y="450" text="Token is {FlexGlobals.topLevelApplication.parameters.token}"/>-->
    <!--<mx:Button x="200" y="450" label="AJAX" click="sendAjax()"/>-->
    <!--<mx:Button x="300" y="450" label="Call JS" click="callJs()"/>-->
    <mx:Canvas x="300" y="435" width="160" height="50" backgroundColor="0x000000" backgroundAlpha="0"
               toolTip="Tours restants avant la fin de la partie.">
        <ui:ClockView x="5" y="5" width="40" height="40" hour="{game.currentHour}" minutes="{game.currentMinute}"/>
        <mx:Label x="50" y="-3" width="110" text="{game.currentTime}" styleName="currentTime"/>
        <mx:Label x="50" y="29" width="110" text="{game.remainingTurns} coups à boire" styleName="remainingTurns"/>
    </mx:Canvas>
    <mx:Canvas x="0" y="492">
        <mx:Label x="445" y="10" width="300" color="white" text="{game.barName}" textAlign="center"
                  fontSize="24"
                  fontWeight="bold" fontStyle="italic">
            <mx:filters>
                <mx:DropShadowFilter distance="2" angle="45" blurX="0" blurY="0" alpha="1" color="0x111111"/>
            </mx:filters>
        </mx:Label>
        <mx:Label x="445" y="36" width="300" color="white" text="{game.barLocation} | {game.barOperationTime}"
                  textAlign="center"
                  fontWeight="bold" fontStyle="italic" fontSize="12">
            <mx:filters>
                <mx:DropShadowFilter distance="2" angle="45" blurX="0" blurY="0" alpha="1" color="0x111111"/>
            </mx:filters>
        </mx:Label>
    </mx:Canvas>
    <ui:SoundButton x="20" y="500" on="true"/>
    <ui:QualityButton x="20" y="528" on="true"/>
    <ui:EffectLayer id="vfxLayer" width="100%" height="100%"/>
</s:Application>
