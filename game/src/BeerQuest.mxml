<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:ui="com.beerquest.ui.*"
               creationComplete="init()"
               width="520" height="320">
    <fx:Style>
        @namespace
        mx
        "library://ns.adobe.com/flex/mx"
        ;

        @font-face
        {
            src: url("kronika.ttf")
        ;
            fontFamily: Kro
        ;
            embedAsCFF: false
        ;
            advancedAntiAliasing: true
        ;
        }

        mx|ToolTip {
            fontFamily: Kro;
            fontSize: 14;
            color: black;
            backgroundColor: #ff0000;
        }

        .game-type {
            fontFamily: Kro;
            fontSize: 16;
            color: #753e00;
        }

        .gameOver {
            fontFamily: Kro;
            fontSize: 48;
            color: #ff0000;
            textAlign: center;
        }

        .currentTime {
            fontSize: 32px;
            fontWeight: bold;
            textAlign: center;
        }

        .remainingTurns {
            fontSize: 12px;
            fontWeight: bold;
            textAlign: center;
        }
    </fx:Style>
    <fx:Script><![CDATA[
        import com.adobe.serialization.json.JSON;
        import com.beerquest.Constants;
        import com.beerquest.Game;
        import com.beerquest.PlayerData;
        import com.beerquest.events.BeerCollectedEvent;
        import com.beerquest.events.CapacityEvent;
        import com.beerquest.events.GameEvent;
        import com.beerquest.events.GemsSwappedEvent;
        import com.beerquest.events.PissEvent;
        import com.beerquest.events.ScoreEvent;
        import com.beerquest.events.TokenEvent;
        import com.beerquest.events.VomitEvent;
        import com.greensock.OverwriteManager;

        import com.greensock.TweenLite;

        import com.greensock.plugins.ColorTransformPlugin;
        import com.greensock.plugins.TintPlugin;

        import com.greensock.plugins.TweenPlugin;

        import mx.controls.Alert;
        import mx.core.FlexGlobals;
        import mx.effects.Tween;

        private function init():void {
            // Init TweenLite
            OverwriteManager.init();
            TweenPlugin.activate([ColorTransformPlugin, TintPlugin]);

            // Event listeners
            addEventListener(CapacityEvent.CAPACITY_GAINED, onGameEvent);
            addEventListener(PissEvent.PISS, onGameEvent);
            addEventListener(ScoreEvent.SCORE_GAINED, onScoreGained);
            addEventListener(TokenEvent.TOKEN_GAINED, onTokenGained);

            // Parameters passed to game
            _allowStart = true;
            var requiredVersion:Number = FlexGlobals.topLevelApplication.parameters.requiredVersion;
            if (requiredVersion > 0) {
                if (requiredVersion > Constants.VERSION) {
                    _allowStart = false;
                    Alert.show("Current: " + Constants.VERSION + "\nRequired: " + requiredVersion + "\n\nPlease empty your cache and reload this page.", "Wrong version");
                }
            } else {
                trace("WARN: No 'requiredVersion' found");
            }

            _mode = FlexGlobals.topLevelApplication.parameters.mode;
            if (_mode != "vs" && _mode != "solo") {
                trace("WARN: No proper 'mode' found");
                _mode = "solo";
                _allowStart = false;
            }
            trace("Starting in mode: " + _mode);

            _token = FlexGlobals.topLevelApplication.parameters.token;
            if (_token == null) {
                trace("WARN: No 'token' found");
                _token = "none";
                _allowStart = false;
                startGame(new Game(_mode, new PlayerData(), Math.random()));
            }
            trace("Using the following token: " + _token);

            // Retrieve game info from server using token
            if (game == null) {
                var request:URLRequest = new URLRequest("/start?token=" + _token);
                request.method = URLRequestMethod.GET;
                _tokenLoader = new URLLoader();
                _tokenLoader.addEventListener(Event.COMPLETE, onStartInfoReceived);
                try {
                    _tokenLoader.load(request);
                    trace("Load game infos requested.");
                } catch (e:ArgumentError) {
                    trace("Load game infos: an ArgumentError has occurred.");
                } catch (e:SecurityError) {
                    trace("Load game infos: a SecurityError has occurred.");
                }
            }
        }

        private function onStartInfoReceived(e:Event):void {
            trace("Game infos received.");
            var data:Object = JSON.decode(_tokenLoader.data);
            trace("Seed is " + data.seed);
            _tokenLoader.removeEventListener(Event.COMPLETE, onStartInfoReceived);
            _tokenLoader = null;
            startGame(new Game(_mode, new PlayerData(), data.seed));
        }

        private function startGame(game:Game):void {
            if (!_allowStart && !Constants.DEBUG) {
                game.gameOver = true;
            }
            game.addEventListener(GameEvent.CURRENT_TURN_CHANGED, onCurrentTurnChanged);
            game.addEventListener(GameEvent.GAME_OVER, onGameOver);
            this.game = game;
            boardView.game = game;
        }

        private function onGameEvent(e:GameEvent):void {
            game.handleEvent(e);
        }

        private function onCurrentTurnChanged(e:GameEvent):void {
            uploadScore();
        }
        
        private function onGameOver(e:GameEvent):void {
            TweenLite.to(gameover, 2, {y:0});
            if (!_scoresSent) {
                uploadScore();
                _scoresSent = true;
            }
        }

        private function uploadScore():void {
            var data:URLVariables = Constants.STATS.getForSerialization();
            data.mode = game.mode;
            data.token = _token;
            data.game_version = Constants.VERSION.toString();
            data.score = game.me.fullBeers;
            data.flash_version = Capabilities.version;

            var request:URLRequest = new URLRequest("/postscore");
            request.method = URLRequestMethod.POST;
            request.data = data;
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(Event.COMPLETE, onScorePosted);
            try {
                loader.load(request);
                trace("Score posted.");
            } catch (e:ArgumentError) {
                trace("Post score: an ArgumentError has occurred.");
            } catch (e:SecurityError) {
                trace("Post score: a SecurityError has occurred.");
            }
        }

        private function onScoreGained(e:ScoreEvent):void {
            var x:Number, y:Number;
            if (e.capacity != null) {
                var capaLoc:Point = myStatus.locateCapacity(e.capacity);
                x = capaLoc.x;
                y = capaLoc.y;
            } else {
                x = e.stageX;
                y = e.stageY;
            }
            vfxLayer.addScoreEffect(e.beers, e.turns, x, y);
        }

        private function onTokenGained(e:TokenEvent):void {
            var entryPoint:Point = myStatus.tokenEntryPoint;
            vfxLayer.addTokenEffect(e.token, e.stageX, e.stageY, entryPoint.x, entryPoint.y);
        }

        private function onScorePosted(e:Event):void {
            //Alert.show("Score uploaded.");
        }

        [Bindable]
        public var game:Game;

        private var _token:String;
        private var _tokenLoader:URLLoader;
        private var _mode:String;
        private var _allowStart:Boolean;
        private var _scoresSent:Boolean = false;

        ]]></fx:Script>

    <!-- board -->
    <mx:Canvas x="200" y="0" width="320" height="320">
        <ui:BoardView id="boardView" width="100%" height="100%"/>
        <mx:Canvas id="gameover" width="100%" height="100%" backgroundColor="black" y="{-boardView.height}">
            <mx:Label y="120" text="Game Over" width="100%" styleName="gameOver"/>
        </mx:Canvas>
    </mx:Canvas>

    <!-- status bar -->
    <ui:PlayerStatusView id="myStatus" x="12" y="40" game="{game}" player="{game.me}"/>
    <mx:Canvas x="0" y="10" width="200" backgroundColor="0x000000" backgroundAlpha="0"
               toolTip="Tours restants avant la fin de la partie.">
        <mx:Label width="100%" text="{game.remainingTurns} coups Ã  boire" styleName="remainingTurns"/>
    </mx:Canvas>
    <ui:SoundButton x="0" y="250" on="true"/>
    <ui:QualityButton x="0" y="280" on="true"/>

    <!-- vfx layer -->
    <ui:EffectLayer id="vfxLayer" width="100%" height="100%"/>

    <!-- debug -->
    <mx:Label text="Available moves: {boardView.availableMoves}" x="0" y="0" visible="{Constants.DEBUG}"/>
    <mx:Label x="0" y="300" text="Version {Constants.VERSION} - DEBUG" color="0xff0000" fontWeight="bold" fontSize="14"
              visible="{Constants.DEBUG}"/>
</s:Application>
