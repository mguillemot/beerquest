<?xml version="1.0"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
               xmlns:s="library://ns.adobe.com/flex/spark"
               xmlns:mx="library://ns.adobe.com/flex/mx"
               xmlns:ui="com.beerquest.ui.*"
               creationComplete="init()"
               width="760" height="612">
    <fx:Style>
        @font-face
        {
            src: url("kronika.ttf")
        ;
            fontFamily: Kro
        ;
            embedAsCFF: false
        ;
            advancedAntiAliasing: true
        ;
        }

        .game-type {
            fontFamily: Kro;
            fontSize: 16;
            color: #753e00;
        }

        .gameOver {
            fontFamily: Kro;
            fontSize: 48;
            color: #ff0000;
            textAlign: center;
        }
    </fx:Style>
    <fx:Script><![CDATA[
        import com.adobe.serialization.json.JSON;
        import com.beerquest.Capacity;
        import com.beerquest.Constants;
        import com.beerquest.Game;
        import com.beerquest.PlayerData;
        import com.beerquest.events.BeerCollectedEvent;
        import com.beerquest.events.CapacityEvent;
        import com.beerquest.events.GameEvent;
        import com.beerquest.events.GemsSwappedEvent;
        import com.beerquest.events.PissEvent;
        import com.beerquest.events.VomitEvent;

        import mx.controls.Alert;
        import mx.core.FlexGlobals;
        import mx.rpc.mxml.Concurrency;

        private function init():void {
            addEventListener(GemsSwappedEvent.GEMS_SWAPPED, onGameEvent);
            addEventListener(BeerCollectedEvent.BEER_COLLECTED, onGameEvent);
            addEventListener(CapacityEvent.CAPACITY_GAINED, onGameEvent);
            addEventListener(VomitEvent.VOMIT, onGameEvent);
            addEventListener(PissEvent.PISS, onGameEvent);

            /*try {
             ExternalInterface.addCallback("testJs", testJs);
             } catch (e:Error) {
             trace("Impossible to connect to ExternalInterface.")
             } */

            var freezeGame:Boolean = false;
            var requiredVersionParam:Number = FlexGlobals.topLevelApplication.parameters.requiredVersion;
            if (requiredVersionParam > 0) {
                if (requiredVersionParam > Constants.VERSION) {
                    freezeGame = true;
                    Alert.show("Current: " + Constants.VERSION + "\nRequired: " + requiredVersionParam + "\n\nPlease empty your cache and reload this page.", "Wrong version");
                }
            } else {
                trace("WARN: No 'requiredVersion' found");
                if (!Constants.DEBUG) {
                    freezeGame = true;
                }
            }

            var meData:PlayerData;
            var meParam:String = FlexGlobals.topLevelApplication.parameters.me;
            if (meParam != null) {
                var me:Object = JSON.decode(meParam);
                meData = new PlayerData(me.name, me.title, me.avatar, me.level);
            } else {
                trace("WARN: No 'me' found");
                meData = new PlayerData("Mattiou Guillegay", "Le Saint-Bernard", "http://profile.ak.fbcdn.net/v227/369/75/q1308311126_5056.jpg", 42);
                if (!Constants.DEBUG) {
                    freezeGame = true;
                }
            }

            var opponentData:PlayerData;
            var opponentParam:String = FlexGlobals.topLevelApplication.parameters.opponent;
            if (opponentParam != null) {
                var opponent:Object = JSON.decode(opponentParam);
                opponentData = new PlayerData(opponent.name, opponent.title, opponent.avatar, opponent.level);
            } else {
                trace("WARN: No 'opponent' found");
                opponentData = new PlayerData("Jeano Babouin", "Le bois-sans-soif", "http://profile.ak.fbcdn.net/v227/369/75/q1308311126_5056.jpg", 89);
                if (!Constants.DEBUG) {
                    freezeGame = true;
                }
            }

            var barName:String, barLocation:String, barBanner:String, barOpen:String, barClose:String;
            var barParam:String = FlexGlobals.topLevelApplication.parameters.bar;
            if (barParam != null) {
                var bar:Object = JSON.decode(barParam);
                barName = bar.name;
                barLocation = bar.location;
                barBanner = bar.banner;
                barOpen = bar.open;
                barClose = bar.close;
            } else {
                trace("WARN: No 'bar' found, initializing game with default value");
                barName = "Le Des-Murges Bar";
                barLocation = "Paris - France";
                barBanner = "http://erhune.iobb.net/images/banner.jpg";
                barOpen = "21:00";
                barClose = "2:00";
                if (!Constants.DEBUG) {
                    freezeGame = true;
                }
            }

            game = new Game(meData, opponentData, barName, barLocation, barOpen, barClose);
            if (freezeGame) {
                game.gameOver = true;
            }

            var loader:Loader = new Loader();
            banner.addChild(loader);
            loader.load(new URLRequest(barBanner));
        }

        private function onGameEvent(e:GameEvent):void {
            game.handleEvent(e);
        }

        /*public function testJs():void {
         Alert.show("coucou de la part du JS!!");
         }

         private function sendAjax():void {
         var request:URLRequest = new URLRequest("/account");
         //            request.contentType = "text/xml";
         //            request.data = dataXML.toXMLString();
         //            request.method = URLRequestMethod.POST;
         var loader:URLLoader = new URLLoader();
         loader.addEventListener(Event.COMPLETE, completeHandler);
         try {
         loader.load(request);
         trace("Request sent.");
         } catch (e:ArgumentError) {
         trace("An ArgumentError has occurred.");
         } catch (e:SecurityError) {
         trace("A SecurityError has occurred.");
         }
         }

         /private function completeHandler(event:Event):void
         {
         trace("Request completed.");
         var loader:URLLoader = URLLoader(event.target);
         var variables:URLVariables = new URLVariables(loader.data);
         Alert.show("toto=" + variables.toto);
         }

         private function callJs():void {
         try {
         ExternalInterface.call("callFromFlex", "plup");
         } catch (e:Error) {
         trace("Impossible to connect to ExternalInterface.")
         }
         } */

        [Bindable]
        public var game:Game;
        ]]></fx:Script>
    <mx:Image id="banner" x="0" y="492" width="771" height="144"/>
    <mx:Image source="@Embed(source='fond-jeu.png')"/>
    <mx:Label x="580" y="20" text="Version {Constants.VERSION} - DEBUG" color="0xff0000" fontWeight="bold" fontSize="14" visible="{Constants.DEBUG}"/>
    <ui:PlayerDataView x="35" y="55" player="{game.me}"/>
    <ui:PlayerDataView x="435" y="55" player="{game.opponent}" mirror="true"/>
    <mx:VBox x="220" y="5" width="320" horizontalAlign="center" verticalGap="0">
        <mx:Image source="@Embed(source='battle-biture.png')"/>
        <mx:Spacer height="15"/>
        <mx:Image source="@Embed(source='vs.png')"/>
        <mx:HBox verticalAlign="middle" horizontalGap="2">
            <mx:Label text="Duel" styleName="game-type"/>
            <mx:Image source="@Embed(source='collected-beer-small.png')"/>
            <mx:Label text="152" styleName="game-type"/>
        </mx:HBox>
    </mx:VBox>
    <ui:PlayerStatusView x="25" y="165" game="{game}" player="{game.me}"/>
    <ui:PlayerStatusView x="560" y="165" game="{game}" player="{game.opponent}" clickable="false"/>
    <mx:Label text="Available moves: {boardView.availableMoves}" x="10" y="10" visible="{Constants.DEBUG}"/>
    <mx:Label text="Combo: {boardView.combo}" x="10" y="30" visible="{Constants.DEBUG}"/>
    <mx:Label text="Sous-bocks: {game.me.coasterReserve}" x="10" y="50" visible="{Constants.DEBUG}"/>
    <mx:Canvas x="220" y="153" width="320" height="320">
        <ui:BoardView id="boardView" width="100%" height="100%" game="{game}" playable="{game.gameOver}"/>
        <mx:Canvas width="100%" height="100%" backgroundColor="black" alpha="0.8" visible="{game.gameOver}">
            <mx:Label y="120" text="Game Over" width="100%" styleName="gameOver"/>
        </mx:Canvas>
    </mx:Canvas>
    <!--<mx:Label x="10" y="450" text="Token is {FlexGlobals.topLevelApplication.parameters.token}"/>-->
    <!--<mx:Button x="200" y="450" label="AJAX" click="sendAjax()"/>-->
    <!--<mx:Button x="300" y="450" label="Call JS" click="callJs()"/>-->
    <mx:Label id="remainingTurns" x="220" y="472" width="320"
              text="Il est {game.currentTime} | Reste {game.remainingTurns} coups Ã  boire"
              textAlign="center"/>
    <mx:Canvas x="0" y="492">
        <mx:Label x="445" y="10" width="300" color="white" text="{game.barName}" textAlign="center"
                  fontSize="24"
                  fontWeight="bold" fontStyle="italic">
            <mx:filters>
                <mx:DropShadowFilter distance="2" angle="45" blurX="0" blurY="0" alpha="1" color="0x111111"/>
            </mx:filters>
        </mx:Label>
        <mx:Label x="445" y="36" width="300" color="white" text="{game.barLocation} | {game.barOperationTime}"
                  textAlign="center"
                  fontWeight="bold" fontStyle="italic" fontSize="12">
            <mx:filters>
                <mx:DropShadowFilter distance="2" angle="45" blurX="0" blurY="0" alpha="1" color="0x111111"/>
            </mx:filters>
        </mx:Label>
    </mx:Canvas>
</s:Application>
